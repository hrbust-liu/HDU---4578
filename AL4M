#include<stdio.h>
#include<string.h>
#define ls rt<<1
#define rs rt<<1|1
#define rep(i,j,k) for(int i=j;i<=k;++i)
#define N 100005
const int M=10007;
int f[N*4][5],add[N*4],mul[N*4],se[N*4],siz[N*4];
void add_up(int rt,int v)
{
    add[rt]=(add[rt]+v)%M;
    f[rt][3]=(f[rt][3]+(3*f[rt][2]*v%M)+(3*(f[rt][1]*v%M)*v%M)+((siz[rt]*v%M)*(v*v%M)))%M;
    f[rt][2]=(f[rt][2]+((siz[rt]*v%M)*v%M)+(2*f[rt][1]*v%M))%M;
    f[rt][1]=(f[rt][1]+siz[rt]*v)%M;
}
void mul_up(int rt,int v)
{
    add[rt]=(add[rt]*v)%M;
    mul[rt]=(mul[rt]*v)%M;
    f[rt][1]=(f[rt][1]*v)%M;
    f[rt][2]=((f[rt][2]*v%M)*v)%M;
    f[rt][3]=((f[rt][3]*v%M)*(v*v%M))%M;
}
void se_up(int rt,int v)
{
    add[rt]=0;
    mul[rt]=1;
    se[rt]=v;
    f[rt][1]=(siz[rt]*v)%M;
    f[rt][2]=(f[rt][1]*v)%M;
    f[rt][3]=(f[rt][2]*v)%M;
}
void up(int rt)
{
    if(se[rt]!=-1)
    {
        se_up(ls,se[rt]);
        se_up(rs,se[rt]);
        se[rt]=-1;
    }
    if(mul[rt]!=1)
    {
        mul_up(ls,mul[rt]);
        mul_up(rs,mul[rt]);
        mul[rt]=1;
    }
    if(add[rt])
    {
        add_up(ls,add[rt]);
        add_up(rs,add[rt]);
        add[rt]=0;
    }
}
void update(int rt,int L,int R,int l,int r,int v,int opt)
{
    if(l<=L&&R<=r)
    {
        if(opt==3)
            se_up(rt,v);
        else if(opt==2)
            mul_up(rt,v);
        else
            add_up(rt,v);
        return ;
    }
    int mid=(L+R)/2;
    up(rt);
    if(l<=mid)
        update(ls,L,mid,l,r,v,opt);
    if(r>=mid+1)
        update(rs,mid+1,R,l,r,v,opt);
    f[rt][1]=(f[ls][1]+f[rs][1])%M;
    f[rt][2]=(f[ls][2]+f[rs][2])%M;
    f[rt][3]=(f[ls][3]+f[rs][3])%M;
}
int query(int rt,int L,int R,int l,int r,int v)
{
    if(l<=L&&R<=r)
        return f[rt][v];
    up(rt);
    int mid=(L+R)/2,sum=0;
    if(l<=mid)
        sum=sum+query(ls,L,mid,l,r,v);
    if(r>=mid+1)
        sum=sum+query(rs,mid+1,R,l,r,v);
    return sum%M;
}
void build(int rt,int L,int R)
{
    siz[rt]=(R-L+1);
    mul[rt]=1;
    if(L==R)
        return ;
    int mid=(L+R)/2;
    build(ls,L,mid);
    build(rs,mid+1,R);
}
int main()
{
    int n,m;
    while(scanf("%d %d",&n,&m)!=EOF)
    {
        if(!n&&!m)
            break;
        memset(se,-1,sizeof(se));
        memset(add,0,sizeof(add));
        memset(f,0,sizeof(f));
        build(1,1,n);
        int opt,l,r,v;
        rep(i,1,m)
        {
            scanf("%d %d %d %d",&opt,&l,&r,&v);
            if(opt==4)
                printf("%d\n",query(1,1,n,l,r,v));
            else
                update(1,1,n,l,r,v,opt);
        }
    }
}

